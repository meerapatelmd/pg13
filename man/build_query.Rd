% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build.R
\name{build_query}
\alias{build_query}
\title{Build a Simple SQL Query}
\usage{
build_query(
  fields = "*",
  distinct = FALSE,
  schema,
  table,
  where_in_field,
  where_in_vector,
  where_not_in_field,
  where_not_in_vector,
  where_is_null_field,
  where_is_not_null_field,
  case_insensitive = TRUE,
  limit,
  random
)
}
\arguments{
\item{fields}{Fields selected for. Defaults to "*".}

\item{distinct}{If TRUE, the distinct row count will be returned.}

\item{schema}{The target schema for the operation.}

\item{table}{Target table for the operation.}

\item{where_in_field}{Paired with \code{where_in_vector}, adds a "WHERE {field} IN ({vector})" clause to the query corresponding to the field-value pair.}

\item{where_not_in_field}{Paired with \code{where_not_in_vector}, adds a "WHERE {field} NOT IN ({vector})" clause to the query corresponding to the field-value pair.}

\item{case_insensitive}{If TRUE, both sides of the query are converted to lowercase.}

\item{limit}{(Optional) Integer of the row limit. Takes precedence over \code{random} if both arguments are provided.}

\item{random}{(Optional) Integer of the random number of rows to return. Is preceded by \code{limit} if both \code{limit} and \code{random} are provided.}
}
\description{
Build a Simple SQL Query
}
\examples{
# Building SQL Statements using R
library(pg13)

# Build a Simple Query
build_query(schema = "public",
            table = "concept_synonym")

build_query(distinct = TRUE,
            schema = "public",
            table = "concept_synonym")


build_query(fields = c("concept_id", "concept_name"),
            distinct = TRUE,
            schema = "public",
            table = "concept_synonym")

# WHERE filters may be applied, but will be ignored if the field-value pair is not provided
build_query(fields = c("concept_id", "concept_name"),
            schema = "public",
            table = "concept_synonym",
            where_in_field = "concept_synonym")

# The query defaults to transforming elements to lowercase for case insensitivity that can be turned off
build_query(fields = c("concept_id", "concept_name"),
            schema = "public",
            table = "concept_synonym",
            where_in_field = "concept_synonym",
            where_in_vector = c("Myocardial Infarction", "Heart Attack"))

build_query(fields = c("concept_id", "concept_name"),
            schema = "public",
            table = "concept_synonym",
            where_in_field = "concept_synonym",
            where_in_vector = c("Myocardial Infarction", "Heart Attack"),
            case_insensitive = FALSE)

}
\seealso{
\code{\link[SqlRender]{render}}
}
