% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/join1.R
\name{draft_join1}
\alias{draft_join1}
\title{Draft a First Degree Join}
\usage{
draft_join1(
  select_table_fields = "*",
  select_join_on_fields = "*",
  distinct = FALSE,
  schema,
  table,
  column,
  join_on_schema,
  join_on_table,
  join_on_column,
  kind = c("LEFT", "RIGHT", "INNER", "FULL"),
  where_in_field,
  where_in_vector,
  where_in_join_on_field,
  where_in_join_on_vector,
  where_not_in_field,
  where_not_in_vector,
  where_not_in_join_on_field,
  where_not_in_join_on_vector,
  where_is_null_field,
  where_is_not_null_field,
  where_is_null_join_on_field,
  where_is_not_null_join_on_field,
  case_insensitive
)
}
\arguments{
\item{select_table_fields}{The fields to select for in the first table}

\item{select_join_on_fields}{The fields to select for in the table being join to the first table}

\item{distinct}{If TRUE, the distinct row count will be returned.}

\item{schema}{The target schema for the operation.}

\item{table}{Target table for the operation.}

\item{column}{Column to join on.}

\item{join_on_schema}{Schema of the table that is being joined to the first table.}

\item{join_on_table}{Table that is being joined to the first table.}

\item{join_on_column}{Column in the \code{join_on_table} that is joined onto the \code{column} of the first table.}

\item{kind}{Type of join. Defaults to left, and options include "LEFT", "RIGHT", "INNER", or "FULL"}

\item{where_in_field}{Paired with \code{where_in_vector}, adds a "WHERE {field} IN ({vector})" clause to the query corresponding to the field-value pair.}

\item{where_not_in_field}{Paired with \code{where_not_in_vector}, adds a "WHERE {field} NOT IN ({vector})" clause to the query corresponding to the field-value pair.}

\item{case_insensitive}{If TRUE, both sides of the query are converted to lowercase.}
}
\description{
A \verb{First Degree Join} is one where the
\verb{JOIN ON} clause occurs on one column on the left and
one column on the right.
}
\examples{
library(pg13)
create_test_schema <-
        function(conn) {

                if (!schema_exists(conn = conn,
                                   schema = "test_schema")) {

                        create_schema(conn = conn,
                                      schema = "test_schema")

                }
        }

conn <- local_connect(dbname = "pg13_test")
create_test_schema(conn = conn)

# Write a table to join to without dropping
write_table(conn = conn,
            schema = "test_schema",
            table_name = "test_table2",
            drop_existing = TRUE,
            data = data.frame(A = 1:25, B = letters[1:25]))

# Joining Test Data
test_data <-
        data.frame(A = 1:100, B = letters[1:100])
test_data

join1(conn = conn,
      write_schema = "public",
      data = test_data,
      column = "A",
      kind = "INNER",
      join_on_schema = "test_schema",
      join_on_table = "test_table2",
      join_on_column = "A")

join1(conn = conn,
      write_schema = "public",
      data = test_data,
      column = "A",
      kind = "RIGHT",
      join_on_schema = "test_schema",
      join_on_table = "test_table2",
      join_on_column = "A")

join1(conn = conn,
      write_schema = "public",
      data = test_data,
      column = "A",
      kind = "LEFT",
      join_on_schema = "test_schema",
      join_on_table = "test_table2",
      join_on_column = "A")

join1(conn = conn,
      write_schema = "public",
      data = test_data,
      column = "A",
      kind = "FULL",
      join_on_schema = "test_schema",
      join_on_table = "test_table2",
      join_on_column = "A")


drop_schema(conn = conn,
            schema = "test_schema",
            cascade = TRUE)

dc(conn = conn)
}
\seealso{
\code{\link[SqlRender]{render}}
}
